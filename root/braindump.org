#+TITLE: Braindump
---------
**Very useful commands for Org Mode:**
- `C-c C-o` navigates to link
- `C-c C-x C-v` displays inline images
- `C-c C-x C-l` previews $LaTeX$
- `C-c C-l` inserts a link
- `Space o A` opens agenda mode
- `C-c C-s` schedules a schedule/schedules a deadline 
- `C-c C-x C-s` archives the subtree
- ~Spc w w~ switches windows
---------
    
* All about OGP
** Feedback on my interview
initiative => strong, working on all sorts of stuff, blog it out, outline my thoughts, interview prep
ability => resume deep dive with nikhil and chinying not that impressive (question mark), but Hong thought the bayesian SMS was deep enough (dispelled doubts about technical depth)

CHin ying noted familiar with complexity, made it about halfway trhough the question, i do plan and talk about high level approaches and considerations, but coding ended up a bit chaotic. Need to work on explaining the code (but great I explained it before i started writing). He said I had more experience i would be able to handle the edge cases

Nikhil's question: went a lot more smoothly, got stuck but managed to get unstuck which is good, he said I could code fast, i knew what i could do to refactor, i knew algo complexity, decent,

More generally on communication: I'm a good communicator especially on the technical interview, Everyone noted I was able to speak clearly and well, BUT i do tend to talk extensively/waffle at the theoretical or high level, and it takes some time to get to the actual nuts and bolts <— this was hongyi's feedback. Overall strong communicator

My personal suggestion (from Russell) —> great at documenting and preparing, but don't be compelled to say eveyrthing you prepare.

especially for someone who comes from a nontraditional background, I have a good technical depth and side projects

"work is very good, nontrivial side-projects, especially for someone non traditional , but technical depth not as good as the best engineer candidates" — verbatim quote from hongyi

strong initiative —> good fit for team

strong communicator (only minor tuning needed)

strong POTENTIAL for technical depth
** Leveling Philosophy:
[[./docs/Levelling_Performance_Promotions.pdf]]
[[./docs/Software_Engineer_Career_Schema.pdf]]
** Pay:
*Software Developer*
SD1 77
SD2 95

*Associate Software Engineer*
ASE1 116 <— the CS grads with a traditional background come in here
ASE2 127
ASE3 139

*Software Engineer*
SE1 <— 151,005
SE2
SE3: because they're better, ppl come to them for mentorship

*Senior Software Engineer*
SSE1 <— 210,500: resting level for engineers
SSE2
SSE3

Deliberately mapping nicely to Google's own system:
L3 is Associate
L4 is Core
L5 is Senior
L6 is Staff
** Next steps:
Hey Zheng Hong - had a quick chat with the Govtech HR team. They clarified next steps:

The next steps from here are:

Zheng Hong will need to enquire from IMDA the Liquidated Damage (LD) amount – for Govtech HR to present to Govtech CE as the amount we need to pay for the transfer.

Zheng Hong will then need to meet with representatives from the Govtech Senior Leadership Team for an interview, before Govtech can confirm that they will be proceeding with the bond transfer

When Zheng Hong is accepted by SLM, Govtech HR will follow through with IMDA on the transfer payment.

I've clarified with them for their advice on how you should approach IMDA HR. They suggested that until you have the interview with the Govtech senior leadership team, you could position this as a general query to understand your LD. Whilst its accurate to say that you have cleared Govtech interviews and OGP would be happy to take you in as a software engineer, it would be premature to also inform IMDA that Govtech has agreed to takeover your bond, as this requires govtech senior leadership approval (hence the interview).
* Preparing for interview with GovTech CE
== THINK ABOUT MY FUTURE from the CE's PERSPECTIVE == 
Where do I want to be in five years?
- I want to lead my own technical group (not necessarily in GovTech)
  That's why I'm joining OGP, to learn the technical and the leadership skills
What value do I bring to the organisation? Am I going to be a 10X engineer?
- I am an excellent writer (well-trained, at least).
  - With good writing I can attract engineers much better than me.
  - With writing I can argue coherently when we are faced with a tussle with
  other agencies
- What is unique about me? How can I contribute to the rest of the Civil Service?
  - PPE background AND am interested in CS: to develop the interest in CS,
    get a proper engineering background
  - When I go into the rest of the Civil Service, I can properly articulate
    the Smart Nation plan.
    I can talk to the engineers 
    I can translate what engineers are saying to the rest of the Civil Service.
Why don't I want to join SIoT?
- SIoT is hardware, they do do pure software but software mentorship is not there
Why don't I want to join GDS?
- Team is a big too big, worry that I might be a cog in the machine
Why don't I want to join Meteor?
- Not that excited by the work they do (MoM, form stuff)
- Timeline of projects a bit long for my taste

== PROS OF OGP ==
  
OGP is really good at encouraging independent learning, they are really gung-ho
they like to do things first and apologise later
They don't play the government game, they don't report to anyone.
Every Friday they have 20% time, build any project you're passionate about.

== CONS OF OGP ==
The group is very flat,
good if you can stomach a direct line to your boss, but
bad if you like a bit of hierarchy or get intimidated by speaking to the Director

Very young team:
you can get a few years of mentorship,
but you won't be able to get advanced level mentorship

Gung-ho attitude works against you sometimes
because the agency you're trying to help might not appreciate
that you didn't consult them.

Overall: perfect place for you to work as a young engineer,
lots of plusses, you'll only run into the drawbacks in a couple of years.

** GDS (Ronald)
Ronald (GDS):

Fresh grad, graduated 3 years ago, been in GDS 2 years going to 3. Currently in GDS I'm in a "tribe": five tribes, 

1. DSAID (Data science)
2. Application development (engineering productivity, ace, dcube)
5. Design (UI/UX)

I'm from the engineering productivity team

In this three years I've never switched tribes and I've always been in GDS,

What he likes:

GovTech lots of flexibility in improving yourself, exploring new technologies. He's had exposure to many tech stacks and different technologies.

PaaS team writing front and back (angular, node, etc). Next went into an API gateway project (more devops stuff like Kubernetes, cloud stuff).
Third project: writing application development for billing and reporting, doing React and NestJS

Forward thinking in terms of tech adoption and tech stack

When we think about products and projects we're thinking about what we can do to benefit 

We have innovative projects: OpenCert, certificates on the blockchain.
"Nice playground to explore, learn and grow"

How do you decide what project to work on? —> you choose to go deep or venture out

Process of moving to a new project: first of all you need to contact the person and ask them if they're willing to take you. Then talk to your reporting officer and say I want to contribute to this project ... based on RO's discretion.

Two ways that projects can be started:

1. Everyone can start their own project if they have their own idea. OpenCerts have their own initiatives, they came up with  an MVP, spoke to their RO and got approval. 
2. Unless it's an agency project, agency will approach GDS to ask them to develop.

DSAID not under GDS.

What are tribes? FOUR tribes.

1. ESD (UI/UX)
2. ACE (partners with agencies to collaborate to do projects, software development team)
3. DCUBE (similar to ACE, fully focused on development. ACE Is more enterprise (WSG), DCUBE more citizen-centric)
4. Engineering productivity (non client facing, backbone, middleware layer that supports ACE and DCUBE, creates WoG PaaS, API gateway, etc. SG, CICD pipeline, that sort of thing)

In Engineering Productivity: Our projects have a long lifespan because we have to create, maintain and update it —> 3 to 4 years and we have to constantly be improving

API Gateway: on-prem, recently containerised to move to Kubernetes.

What don't you like?

- Policy is a problem, getting approvals, meeting audit requirements, etc etc. bureaucracy is the main red tape

What sets GDS apart from the other divisions?

- Can't compare between divisions because they're all focused on different areas on things, so can't compare. It really depends on your skillsets and interests. 

- Think more about the projects that I'll be working on, rather than the tribes I'm interested in. Comparing tribes doesn't really make sense either because tribes don't really affect us? As software developers we are more product focused

- Within GDS, most of the tribes have the same culture. Some differences but in terms of workwise, I think it's the same. All Agile, product-focused.

Are there cases where top-down boss dictates criteria down to management 

- in agencies more common, you don't really have full control. It happens quite commonly in workspaces.

Pay grade? 

— Even nontechnical staff and technical staff get paid on the pay grade
— Pay grade can have a very wide band.
— Tech Associate Program: starting pay is higher, even 6 is not a problem?

lieu, [24.11.20 14:10]
Directly under GovTech: DSAID, CSG, Govt Infra, Governance Group, SIoT, GDS

Collaboration:

Under MOE:  
Under MOM: Meteor. We will send engineers to MOM

lieu, [24.11.20 14:11]
when govtech collaborated with MoE to create Parents Gateway: this was DCube, so when they coprogram together the product is still owned by MoE
** Meteor (Thomas)
lieu, [24.11.20 16:24]
Meteor is still considered pretty new in GovTech:

Govtech got two parts: HQ, Hive all this,  second part is the services.
Services are in ministry: manpower, CPF, MoE whatever. Biggest service is MOM which is under Meteor.
Meteor is tribe. 80—90 all technical people.
So HQ is better because they have more people.

They do more public facing projects. Within their tribe they also have a lot of projects.
Meteor does work exclusively for MoM right now, but we are constantly expanding, and we're going to do projects like MyCareersFuture and so on. 

Higher overview: Foreign domestic worker proejct dealing with maids and stuff, there's also another big project called the finance planning, Moneysense, For my team we are doing employment pass team. We have 5 "feature teams" and each team is <20 people. We are building forms. Node and Vue.js. Super complicated processes and architecture. 
Rules and integration with legacy systems. Rules: algorithms
GovTech focuses a lot of code quality and reusability. A lot of emphasis on the architecture and stuff. For example we started with EP and he went 2 years on a single pass. But that's also because we were building the foundation/architecture etc.

We have to handle the security, and APIs, and work with different teams, and so on.

Most people would choose HQ to be their base because the projects are more exciting.

From an employee point of view, because Meteor is smaller, you get more recognised.
Technical complexity: Meteor work is much more complex than what people in HQ have developed.
HQ is very developed, so you're kind of like a cog in the machine almost. Harder to shine and harder to innovate/create
Enter the project and be just a developer and you can build features.

In Meteor you'll be given a chance to be a reviewer, shadow a tech lead

Something I would change about Meteor: nothing, everyone in GovTech is quite happy with their job

We don't pay as much as FAANG but management wants you to support you to go to FAANG.
I have worked in other companies before, but we have a really good "growing system" for employees.
All of us have "levels" on every single one of our skills and we are encouraged to level up.

Promotions: mainly based on how well you perform, there's a bell curve.

How are projects initialised? Done by the tech lead position level.
They want you to spend two to three years on a project before moving on. 

How's the mentorship in Meteor?
-> We all work closely with one another, including the tech lead.
-> For my team there's around 5-6 software engineers, we work closely together to come up with solutions
-> When you hit roadblocks you can always approach tech lead who is just your colleague.
-> Very open desk (MoM).

Meteor is quite mature: projects already scoped out, the innovation are in constantly building out features/scope creep/tech debt. Reducing software complexity. 

How is the day-to-day:
Entire GovTech run by 2 week sprints, every start of sprint we'll do some planning for the two weeks, day to day we'll pick up JIRA tickets to code, we'll submit a merge request, there's a reviewer who will review the code, and we generally encourage software engineer to pair program. (Junior full-time pair programming. The whole of GovTech does pair programming). Merge into master and that's it for the story.

Generally not really a lot of meetings unless you are more senior. Even for meetings the tech huddle is quite technical related

Fresh grad salary? Maybe first digit is 5. You can choose to work pure technical route.

INternal document cannot be shared. Competency framework. Speak to Desmond about it.

lieu, [24.11.20 16:46]
Main gist: you have more chance/opportunities to show yourself in Meteor because it's smaller, less cog in the machine.
Our projects are on a much bigger scale.

My form 50-60 people working on it, way more complex and way more large compared to HQ projects.

GovTech culture is pretty good, don't need to worry about
** SIoT (Ben)
Small team -> no resource, no small
What does Sensors and IoT (SIoT) do:
  software tied to hardware or purely hardware
Trying to collect data autonomously.
Where to collect data, how to use it?
TraceTogether token built with us 
Four different divisions:
1. MANUKA team does the hardware platform
2. DECADA: Deploy MANUKA, how to manage? Overarching cloud platform
   to manage the deployed IoT devices
3. Implementation team: this is the team that takes MANUKA and DECADA and deploy
   out. Smart garden, smart gym, smart offices 
4. Research team that does application research for cutting-edge sensors like
   robotics and stuff, taking that and passing it out to the implementation team.
Software wise will be implementation team that write software, and DECADA will
be the cloud management software, frontend backend.

* Salaries of different roles
Global Markets Analyst, HSBC, 9.2k (110k pa) + 3 month bonus
Analyst, IB Credit Suisse, 10k monthly (120k pa) + bonus
Consultant, Bain, 6.5k monthly (75k pa) + 10k bonus
SWE, Jump Trading, 135k base (never increases), discretionary bonus with no cap (i.e. goes up infinitely)

DX9, MINDEF, 3850 + 300 allowance (total 4150)
Stripe: 100k base, 160k USD stocks vesting over 4 years, sign on bonus 30k SGD, 10-15% yearly bonus
Jane Street HK: 450k SGD lol disgusting

van chia: 140k GBP after TC
* CKY's thoughts on how to Make ADM Great Again
lieu, [09.10.20 12:07]
now that youve come to the end ish of your NTU ADM journey
if you were the NTU ADM tsar
how would you design the degree

:CKY:
game design should be a separate dedicated pathway
theres no way u can shoehorn it into an art school style system
u need an entire school dedicated to it, digipen style
u have pathways for art, programming, level design, and business
everyone is required to take the intro level course of each pathway
im not familiar with the school structure of digipen
anyway the key innovation would be that very early on, you divide students into groups of 4
u pair up one member from each pathway
and then u prototype shit like crazy, every semester build a game together
thats what i would propose if the dean asked me
no comment on the fine arts side, fine arts is all bs anyway so you can literally teach nothing and students can still become artists
maybe u are overseen by a mentor, you have the chance to change team every semester
the key thing is that u build team competencies from the get go
and you allow teams to stick together if they want
this encourages effective close knit cells to form
thats how u get masterpieces
also right the standards for game design course need to be set way the fuck higher
because im in all half fuck courses
and i know that most of my course mates have no future except making secondary assets for gacha games
people supposedly in final year at uni but they make some garbage newgrounds 3 star quality flash game
how to compete with digipen
:END:

*Lieu:*
what's the quality of people in digipen

:CKY:
also not amazing but at least digipen can deliver something that looks like sweatshop quality
as opposed to "babby's first unity game" quality
if u go game design pathway the expectation is that it gives u a minimum standard of competency to be a good fit in the industry
rn this is absolutely not the case in my opinion
a lot of people will have their dreams crushed
:END:

*Lieu:*
does game design include programming or not

*CKY:*
yes but the programming is very basic

*Lieu:*
should it need to include programming

:CKY:
and the math level of this cohort is abysmal
yes absolutely
at least the basics
:END:

*Lieu:*
you can do writing/world design right
be like a D&D writer
or something
you get me
or an artist

:CKY:
how many randomly selected art students do you think are actually capable of writing coherent prose
these are not oxford students
these are literal hipsters who think instagram is cool
do u expect them to understand economics, history, politics, and all the other things that go into worldbuilding
so realistically right, these people will become game artists 99% of the time
except, animation is a way better pathway for game artists
game design tries to be this half fuck grab bag and ends up teaching too low a standard of programming AND too low a standard of art
no matter how you look at it though, ADM in its current state is a waste of time and resources
at least for my courses
:END:

* Entrepreneurship
** [[https://commoncog.com/blog/just-f-cking-ship/][Just Fucking Ship]]: book by Amy Hoy
*** Set a Deadline and Mean It
*** Work Backwards
* Board Game Engine
** Gameboard-1: [[https://www.youtube.com/watch?v=BRnjbP0trug&app=desktop][very cool hardware project]]
* [[https://news.ycombinator.com/item?id=24934722][What Would Mechanical Programming Look Like?]]
* What can one do with a Raspberry Pi 400? The future of computing
[[https://www.raspberrypi.org/blog/raspberry-pi-400-the-70-desktop-pc/][Raspberry Pi 400: the $70 desktop PC]]
[[https://www.raspberrypi.org/app/uploads/2020/10/Raspberry-Pi-400-back--800x571.jpg][Form factor of a Raspberry Pi 400]]
With just a 5V DC and microHDMI-to-HDMI port you can get a legitimate
desktop computer.
And it's incredibly low-cost to boot.
It would honestly be great if everyone had one.
It would be a pretty portable solution.
If only they had added a (tiny) battery to the 400, then you
could move it around for a while without shutting down.
http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/
[[https://www.jeffgeerling.com/sites/default/files/images/raspberry-pi-model-size-comparison.jpg][Compute module size comparison]]
https://www.jeffgeerling.com/blog/2020/raspberry-pi-compute-module-4-review
TL;DR you will need a Compute Module 4 IO Board which will give it all the ports on the model B Pi
and then some. PCIe slot: what can you do with it? Ditto with NVMe (super fast disk I/O).
Watch Jeff Gerling's space for using GPU on the RPi4B, that would be insane.

* CS concepts I'm not sure about
** From the Rust video:
*** What is a runtime?
*** What is a FFI call?
*** What is dynamic dispatch?
*** Refresh the notion of stack vs heap allocation
*** What is a "C ABI"?
You get the ability to swap Python Code and you want some module, you can rewrite it in Rust because Python has C++
* Becoming a better SWE
** Bradfield CS course: [[https://bradfieldcs.com/csi/][link]] 
What I'll learn:
1. Introduction to Computer Systems 	Machine representations of data and programs, the CPU execution model, exceptional control flow, low level programming, reverse engineering x86-64 and optimization, all from a programmer’s perspective. 	Implement a basic virtual machine, reverse engineer x86 assembly, refactor a Go program to improve CPU cache utilization, write a shell with job control.
2. Advanced Programming 	Techniques and practices we expect of seasoned programmers, such as program design, language paradigms and patterns, concurrent programming, portability and interoperability, testing, and profiling. 	Refactor interfaces of existing Go code, profile and optimize an I/O intensive application, configure the garbage collector to reduce latency, detect and fix deadlocks in a concurrent program, interface with C code using cgo.
3. Data Structures for Storage and Retrieval 	An in depth look at some important data structures including B-trees, Log-Structured Merge Trees and Bloom filters. 	Optimize performance of a RocksDB database by understanding and tuning the block cache, compaction, and Bloom filter configuration.
4. Computer Networks 	Understanding network protocols (particularly at the application, transport and network layers) with a focus on programming networked applications, understanding network infrastructure, and working with third party systems (such as cloud providers and third party CDNs etc).
   **Projects: Parse a packet capture file, write a DNS client, write an HTTP proxy, and configure a VPC on AWS.**
5. Operating System Principles and Interfaces 	Learning how best to utilize the systems that sit between our applications and our computer systems, covering topics such as memory virtualization, task scheduling, file systems, and OS-level concurrency primitives.
   **Projects: Create a simple file system with FUSE, create a simple container framework using cgroups, implement green threads on top of POSIX threads, measure a program's cache misses and page faults.**
6. Relational Databases 	Understanding, effectively using, and optimizing relational database systems.
   **Projects: Optimize complex queries in PostgreSQL by reading EXPLAIN statements, parse the PostgreSQL WAL for the purpose of change data capture, and identify and fix isolation anomalies.**
7. Distributed Systems 	Understanding principles and practical considerations for building high-scale data-intensive applications, and learning to reason about tradeoffs between fault tolerance, latency, throughput, consistency and operational overhead.
   **Design and implement a simple distributed key-value store.*

** Talking to people who know better
*** Notes from call with Ben
- Ben says he's quite skeptical about doing a Master's because of opp cost and because I won't learn anything that will make me a better software engineer.
- Master's they put less effort in the social situation.
- Summary of the blog post: people often think the way to get better as a software engineer is to learn computer science because these are fundamentals.
  That's *somewhat* true, but I think that people generally overweight the "unchanging pure fundamentals" and underweight the nitty-gritty of whatever systems that they are working with.
  On the margin, people are better served by deeply understanding the tools that they are using. Learn how the database actually works. Learn how React actually works. Learn how computer networking works.
  Focus on building detailed models on as many layers of the stack as you can.
  It seems like they're a lot of boring random facts,
  but they often generalise. E.g. the details of React and how the React reconciliation algorithm works, but it turns out that the next-gen iOS and Android frameworks also copy React.
  There's a core of highly generalisable stuff in React: view being expressed as props and state and using reconciliation to update the view in the efficient way.
  Learning fiddly details is actually super important for implementation.
  There are some systems that succeed *precisely* because they get the fiddly details right.
  Two other reasons: **they inspire your own software design**.
  Right now in Wave importing your code is really slow, 
  Without the knowledge that you can "hot-reload" code instantly,
  you wouldn't know where to get there.
  Last reason: **helps you debug tricky problems.** If you have a deep understanding you can make
  order-of-magnitude speed improvements. Build models that go through serveral layers of the stack.
  "Our app is randomly slow for a little bit because we're saturating our thread pools...
  Postgres is contending for locks because..."

  **Learn to read source code.**
  **Learning to read your co-workers' source-code on the job.**
  
  Look for CS classes that teach you the details of things in the real world.

  Something very helpful to Ben was reading a networking textbook.

  Docker does a lot of networking 
  How can you run two Docker containers that listen on the same port and have them work?

  Docker isolates processes in a bunch of different ways. There are OS-level isolation
  but the main thing that is difficult is networking.

  **Julia Evans' comics**
  How containers work: [[https://jvns.ca/blog/2020/04/27/new-zine-how-containers-work/][link]] 

  How to use tcpdump or strace to figure out how ...

  Learn to debug!

  General point: learn more about what is going on in the program's innards.
  It's a different *set* of fundamentals that you should learn.
  Software architecture for user interfaces --- no such course
  about how to structure your UI code that it doesn't suck.
  
 [[https://www.benkuhn.net/blub/][Ben Kuhn's advice on being a better SWE]] 

  How can I learn this?
  Three mental habits:
  
  1. Simply refusing to debug via guess-and-check
    "I want to understand why this is happening and not just paste
    the top answer from StackOverflow."
  2. I might have a complicated object relational model,
     and I want the library to map it in a particular way.
     One I can figure out SQLAlchemy to do what I want
     or I can just hack it and write ugly code/workaround.
     Try to do it the "right" way rather than the ugly way.
  3. If you have some code and it feels like magic
     (I wonder why the code is why it is), this is a gold mine:
     I need to understand why the code is what it is.
     I should be constantly trying to guess how the library function 
     is implemented..
     Weirdass thing when you run HTML tags in your javascript.
     JSX. How does that work? What code is actually executed?
     Hooks are super magical and I should really dive into and learn them.
     - Why do Hooks have to be called in the same order every time?
     - Implementation leaking 
     Make a list of the areas of React that you don't know
     and when you have time, work through them
     
*** What Seb said
**I think in general you don't need to start teaching yourself distributed
systems, os, networking, etc**
if you don't work on that it's a waste of your time
if you do work on it you'll pick it up
they won't expect an entry engineer to know all that stuff

**half of being a good software engineer is being a good coworker**:
knowing how and when to contribute during meetings (both business meetings and
technical meetings)
knowing how to give good code feedback
honestly you should just figure out what technologies you'll be working with and
making sure you know a bit about that the first month or so will be 'ramp up'
and the faster you do that the faster you'll be able to write your first feature
that's probably the most important thing

**it really depends on how much you presently know**:
it's kind of silly to try and learn a bunch of technology without any cs
fundamentals
but I think if you have the basics you don't need to go and do category theory
so you know about how monoids work
that'll be highly irrelevant for your job, I think
there's a certain level of fundamentals above which it isn't really in your
interested from a practical point of view to invest more time
but again without knowing exactly how much you know, and what you'll be working on
it's hard to give a blanket statement about what you should or should not do with your time

**assuming you have some background, a reasonable thing to do is what I suggested:**
**learn the basics of the tech stack you'll in fact be using**

if they use react,
they'll probably use something like redux, and you should know how that works
recently react has moved away from class based components and into functional components
it's probably useful to know what that is and the advantages (and disadvantages)

they'll probably also use graphql, so it might be good to know how that works etc
you should ask them

in general talking to your mentor (I assume you'll have one) and asking them
what they did (or wish they did) before starting is a good strategy

*** What Julius said
oh pretty recently i was quite curious how the python interpreter works,
especially with regards to threads so i tried reading the docs first, which gave
me an understanding (a "mental model") of how to think about runtimes, so for
the most part it's good enough but i tried to think about how i would've done
it, and i realised i didn't really have a good answer, since in python there's
this thing called the GIL which needs to be locked and aquired between threads
so i got into this rabbithole of how that whole deal works haha

also just to be clear, most of the time diving into a codebase (for big
projects) shouldn't be your first approach haha, most big libraries & tools
(like React, Python) probably have documentation for what you need (i.e. getting
a mental model of things, examples, etc). Reading implementation details should
be like... for if you're just curious about how to implement things, and if you
really can't find out why certain things behave certain ways.
* How to make my writing more popular
- Write more things and pay attention to what people want to read about.
- Posting interesting things to HN is an underrated public good.
- Ben's blog got famous because Dan Luu posted on HN
- Very useful data to see which posts were interesting and which weren't.
- I had writer's block because I started holding myself to much higher standards
  which is bad because blog posts are sampled
  from a long-tailed distribution.
  You really only need one good blog post.
- Takeaway: write more, write interesting stuff,
  and control the inputs where I can post things that I write. How many people see the things that I've written? Increase that number without getting banned for self-promotion.
- Ben suggests I add a comment section or share it publicly.
- If I started posting blog links on Facebook,
  that would make others' walls better.
  There will be a constituency that thinks
  "finally something interesting to read!"
* New social app idea: give poor illiterate families the ability to automatically apply for all the social programs they're eligible for?
Think about how we could make everyone automatically apply for the social programs they're eligible for
Idea came from Mrs Hauw where she said that a family of four was only getting 900 SGD a month even though
by right they would be eligible for much more.
* Digital gardens
 I realise that I've been doing something very similar --- convergent evolution?
rather than doing a stream of consciousness, or a list of blog posts/essays,
I've been using my folder as a monorepo to do all sorts of things:
save my PDFs, write notes, make plans, etc.
Key idea here: chronological order is not a good way to order my posts,
and not everything in the repo must be shown.

taking cues from Gwern
[[https://twitter.com/Mappletons/status/1250532315459194880][List of digital gardens (Twitter thread)]]
https://nesslabs.com/digital-gardeners
https://nesslabs.com/mind-garden

Tom Critchlow's wiki Mind Garden (should emulate): [[https://tomcritchlow.com/wiki/]]
Jethro Kuan's brain dump: https://braindump.jethro.dev/posts/
Joel Hooks on digital gardens https://joelhooks.com/digital-garden

There are two things really that I want here.
The first is that I want to move my blog around in such a way that I don't have to think about
where to put a new post of mine.
The second is to make it very easy to link from any post to every other post, as well as access any auxillary resources.

That's why we want to put everything in a root folder, so every note is accessible by any other note.
    - I've just done this.
    - The next is to write some code that implements backlinks.
      Org roam might alreayd do what I want: https://blog.jethro.dev/posts/introducing_org_roam/
      Check out Jethro's post on doing Roam in org mode:
      https://blog.jethro.dev/posts/zettelkasten_with_org/

https://tasshin.com/blog/implementing-a-second-brain-in-emacs-and-org-mode/
https://fortelabs.co/blog/building-a-second-brain-in-emacs-and-org-mode/
https://nesslabs.com/antilibrary

** Roam
Super hot note taking app nowadays, some principles I should follow, but I will never leave my own editor.
Non-negotiable!
Check out the demo here: https://www.roambrain.com/getting-started/
[[https://roamresearch.com/][Roam Research homepage]]
Look carefully at which principles I can adopt from Roam that will help me 

* Taking the train from Singapore to Oxford for graduation
Bernard had an absolutely brilliant idea:
Bernard Teo, [07.11.20 22:00]
i believe its something like:
Singapore -> JB -> [Gemas] -> Butterworth (Penang) -> [Padang Besar] -> Bangkok -> [somewhere at the northern border of Thailand] -> Vientiane -> Kunming -> (Xian) -> Beijing -> (Ulaanbatar) -> (Irkutsk) -> Moscow -> (Warszawa) -> (Berlin) -> Paris -> London

Bernard Teo, [07.11.20 22:00]
those in '[]' are stops where you wouldn't want to stay overnight

Bernard Teo, [07.11.20 22:01]
those in '()' are optional stops that are interesting enough to be worth stopping overnight

https://railtravelstation.com/from-london-to-singapore-in-40-days-by-train-for-under-s5000/

Bernard estimates that it's going to take about 10 weeks and cost around 10k or more

* [[file:20201107223444-computer_networks_a_top_down_approach.org][Computer Networks: A top-down approach]]
** Think about implementing a DHT (distributed hash table)
** Chat application on TCP
* TODO Establish a presence and tools for Gemini
** TODO Build a gemlog
*** Why is Gemini an attractive protocol? Why do I want to start a gemlog on the Small Web?
[[file:20201109002722-why_i_like_the_small_web.org][Why I like the Small Web]]
*** TODO Think about what I would put on my gemlog
*** TODO Find a way to export .org files to text/gemini files
[[file:20201108233512-thinking_about_being_the_king_of_gemini.org][Thinking about being the King of Gemini]]
1. allow new org-roam files to have arbitrary metadata automatically tagged on
   at the start of the file
2. to convert org-files with arbitrary metadata on top to Markdown-with-YAML
3. Finally, we want .org and .md files both convert to Gemini
** DONE Read the Gemini spec
** DONE Join the Gemini mailing list
** DONE See if there's an index of all Gemini pages
** KILL Build a Gemini web crawler?
* Getting involved in Gemini
** What is the tildeverse?
22:18:38       rndusr | lieu: the tildeverse is a collection of public access   │ g
             │                      | unix systems: http://tildeverse.org                     │ gbmor
** Why Gemini? Is Gemini actually simple? Client compact enforces Gemini's simplicity. Chatdump
19:04:43         ew0k | and you can build a client that eschews the gemini way of  │@julienx        x
4.fset       │                      | only making calls explicitly inititated by the user        │@tomasino
5.  #projects│19:04:54         lieu | what do you mean by calls?                                 │@xq
6.  #python  │19:05:12         ew0k | Get calls to the server                                    │ __R__
7.  nickserv │19:05:42         ew0k | as in, fetching scripts, images, stylesheets etc without   │ ace
             │                      | the user explicitly clicking those links                   │ admicos
             │19:06:17         lieu | oh i see what you mean                                     │ alex11
             │19:06:30         lieu | so the current protocol makes one GET request and gets     │ alexw1
             │                      | back the header/body                                       │ appll
             │19:06:46         lieu | and the client needs to make additional GET requests to    │ aravk
             │                      | get all the images/links/etc in the response body          │ auscompgeek
             │19:07:05         lieu | but you're saying we could theoretically circumvent that   │ autumnova
             │                      | with a client                                              │ avane
             │19:07:13         ew0k | doing that (serving html+js, loading elements without user │ bacterio
             │                      | input, etc) and rendering that in the browser isn’t *bad*, │ bard
             │                      | but I would argue that http is better for it               │ bie
             │19:07:27         lieu | well that would defeat the purpose of gemini entirely      │ boringcactus
             │19:07:31         ew0k | we could, definitely                                       │ Cadey
             │19:07:37         ew0k | exactly                                                    │ calamitous
             │19:07:38         lieu | might as well just go back to HTTP then                    │ calmbit
             │19:07:48         ew0k | yup :)                                                     │ cel
             │19:07:51         lieu | yes so that's the main concern i have here                 │ coleman
             │19:07:58         lieu | or like i guess you could call it a main confusion         │ CommunistWolf
             │19:08:55         lieu | so the gemini protocol allows serving of all types of      │ ComputerTech
             │                      | files including arbitrary binary data / HTML/ videos etc   │ CoopDot
             │19:09:17         lieu | so in fact it's not the PROTOCOL that is enforcing the     │ creme
             │                      | "simplicity" of Gemini                                     │ dacav
             │19:09:29         lieu | it is a compact made by all gemini CLIENT developers       │ dctrud
             │19:09:48         lieu | the simplicity is not in the protocol but rather in the    │ ddevault
             │                      | client                                                     │ djph
             │19:09:52         lieu | do you see what i'm trying to get at                       │ dkibi
             │19:09:57         ew0k | Pretty much spot on                                        │ dokuja
             │19:10:24         ew0k | it’s a philosophy and a community agreement, you could say │ doppler
             │19:10:34         lieu | yes but in that case aren't we barking up the wrong tree?  │ Dr-WaSabi
             │                      | shouldn't we just build simple HTTP clients?               │ easeout
             │19:10:38         lieu | like lynx or whatever                                      │ ehmry
             │19:10:45         lieu | why do we need to have a new gemini protocol?              │ Ekkie
             │19:11:13          bie | we don't *need* it, but                                    │ englishm
             │19:11:17          bie | it's fun                                                   │ enpo
             │19:11:31          bie | and even simple http clients are pretty complex            │ epoch
             │19:11:36         ew0k | Purists will argue that there isn’t really a ”sane” subset │ ericonr
             │                      | of http, and that setting a standard around that is        │ erin
             │                      | impossible                                                 │ ew0k
             │19:12:22         ew0k | but there’s also the history of where gemini comes from. I │ ew0k1
             │                      | found that tomasino’s video on gopher helped me understand │ flamwenco
             │                      | that: https://toobnix.org/videos/watch/1b9699da-3c41-48a8- │ g
             │                      | 8009-97b756e88a3d                                          
** Links
[[https://proxy.vulpes.one/gemini/gemini.circumlunar.space/][Gemini homepage]]
Software for developing: https://proxy.vulpes.one/gemini/gemini.circumlunar.space/software/
GUS search engine: gemini://gus.guru
https://natpen.net/code/gus/tree/gus/lib
https://tilde.chat/ -- this is a useful link to ask people for help about Gemini
[[https://portal.mozz.us/gemini/gemini.circumlunar.space/capcom/][CapCOM Geminispace aggregator (Atom Feeds)]]
* [[file:20201108111035-dynamo_amazon_s_highly_available_key_value_store.org][Dynamo: Amazon's Highly Available Key-value Store]] 
* Learn about IRC protocol, WeeChat
https://weechat.org/files/doc/stable/weechat_user.en.html#usage

* A realistic-economy, libertarian MMORPG
lieu, [09.11.20 16:16]
anyway i have been thinking about a game

lieu, [09.11.20 16:16]
imagine like a multiplayer game where anyone can join

lieu, [09.11.20 16:16]
2d top down game

lieu, [09.11.20 16:16]
and like theres 1000x1000 squares

lieu, [09.11.20 16:17]
anyone can claim any amount of unclaimed land for themselves for free

lieu, [09.11.20 16:17]
provided that they pay a hanson LVT (land value tax) proportinoal to their self-declared land value (that anyone can buy their land for)

lieu, [09.11.20 16:19]
did you write that?

lieu, [09.11.20 16:21]
im not sure how this game would be fun tho

lieu, [09.11.20 16:21]
like what would you do with the claimed land

lieu, [09.11.20 16:22]
one idea is that you would mine "mana deposits" which are the main fiat currency

lieu, [09.11.20 16:22]
the only function of mana deposits are to pay LVT

lieu, [09.11.20 16:23]
maybe another thing you can do with land is grow food

lieu, [09.11.20 16:23]
which is needed to give your character energy to do actions

lieu, [09.11.20 16:24]
thats all i have for an economy though

lieu, [09.11.20 16:24]
its not very compelling

lieu, [09.11.20 16:24]
i think it would be emergently fun

lieu, [09.11.20 16:24]
in the sense that a lot of the fun would be about like bidding for land and claiming it

lieu, [09.11.20 16:25]
but yeah there's nothing compelling to do right now

lieu, [09.11.20 16:25]
i want to build a manufacturing sector

lieu, [09.11.20 16:25]
so we have an agricultural sector

lieu, [09.11.20 16:25]
ergo growing stuff

lieu, [09.11.20 16:26]
we should also have a manufacturing sector which should

lieu, [09.11.20 16:26]
ideally improve the agricultural sector

lieu, [09.11.20 16:26]
i was thinking of a food nutrition system

lieu, [09.11.20 16:26]
each food has an Energy vs Satiety ratio
you can only eat foods up to your max Satiety
so you want the highest Energy/Satiety ratio so you can do the most actions
there would be ways to combine foodstuffs 
Chin Kee Yong, [09.11.20 16:58]
u go flesh out your idea more

Chin Kee Yong, [09.11.20 16:58]
one thing i dont like is

Chin Kee Yong, [09.11.20 16:59]
you always have big ideas but you never commit anything to a google doc and work out what it looks like in actual mechanics

Chin Kee Yong, [09.11.20 16:59]
i have ideas too but they are google docs with control schemes and characters and core mechanics

Chin Kee Yong, [09.11.20 16:59]
and if you dont have that baseline to critique then its very hard to discuss

* Low-impact development: don't runoff water, do it naturally
rain gardens, vegetated rooftops, rain barrels
Permeable pavement
https://www.youtube.com/watch?v=wdcXmerZWDc
https://www.youtube.com/watch?v=ERPbNWI_uLw

* Why do we cut grass?
Why do we prune the plants that grow and why do we cut grass?
Where does the grass we cut grow? Is it composted or is it simply thrown away?
Might it be better to grow plants rather than grass?

* Device convergence: one device to rule them all
Tablet, laptop and desktop "Shells" with a single phone-size SOC
https://nexdock.com/ -- still hasn't been manufactured, but laptop case is $100 
https://anywaretek.com/products/phonebook -- $300
https://www.amazon.com/Raspberry-320x480-Monitor-Raspbian-RetroPie/dp/B07N38B86S/ref=sr_1_21?dchild=1&keywords=Raspberry+Pi+Laptop&qid=1605428573&sr=8-21
Razr Project Linda --- CES concept that never got off the ground
https://www.razer.com/sg-en/concepts/project-linda
https://www.reddit.com/r/linux/comments/4biamr/a_list_of_handheldpocket_linux_computers/
PopCorn PC --- again, hasn't been manufactured, but looks very cool. The main
question is whether it's a) powerful enough to run stuff and b) whether it will
integrate nicely over USB-C with laptop/desktop "shells"

** PureOS and Librem is the best and most mature I think

https://pocket.popcorncomputer.com/
https://puri.sm/posts/the-general-purpose-computer-in-your-pocket/
https://puri.sm/posts/investing-in-real-convergence/


> What Real Convergence Looks Like

Real convergence means bringing your desktop computer with you wherever you go. When we talk about how we have invested in convergence at Purism with PureOS we start with the desktop OS and shrink it down to your pocket.

** Extract from a convo
lieu, [15.11.20 18:11]
[Forwarded from lieu]
Exactly what I said

lieu, [15.11.20 17:39]
[Forwarded from lieu]
You only upgrade one device

lieu, [15.11.20 17:39]
[Forwarded from lieu]
You can keep the shells and peripherals the same

lieu, [15.11.20 17:39]
[Forwarded from lieu]
That is a key value prop imo

lieu, [15.11.20 17:39]
[Forwarded from lieu]
And the best thing is that those shells can be really any form factor you want really

lieu, [15.11.20 17:39]
[Forwarded from lieu]
They don't even have to be restricted to laptop tablet desktop

lieu, [15.11.20 17:39]
[Forwarded from lieu]
Could be anything

lieu, [15.11.20 17:39]
[Forwarded from lieu]
That's what i mean by decoupling

lieu, [15.11.20 17:39]
[Forwarded from lieu]
Conceivably in the future you might have a touchscreen wall

lieu, [15.11.20 17:39]
[Forwarded from lieu]
let's say

lieu, [15.11.20 17:39]
[Forwarded from lieu]
Just plug your phone into the dock

lieu, [15.11.20 17:39]
[Forwarded from lieu]
And then the entire wall mounted screen becomes a massive tablet

lieu, [15.11.20 17:39]
[Forwarded from lieu]
If you want to do big screen gaming plug it into your TV

lieu, [15.11.20 17:47]
[Forwarded from lieu]
for consumer .. the way forward is to wait for apple to do it

lieu, [15.11.20 17:47]
[Forwarded from lieu]
Microsoft doesn't have the solution because

lieu, [15.11.20 17:47]
[Forwarded from lieu]
you need to control both mobile and desktop

lieu, [15.11.20 17:47]
[Forwarded from lieu]
and apple is the only person who does

lieu, [15.11.20 17:47]
[Forwarded from lieu]
Google has chromebooks which are shite

lieu, [15.11.20 17:47]
[Forwarded from lieu]
Microsoft king of desktop only

lieu, [15.11.20 17:47]
[Forwarded from lieu]
so apple is the only one who could pull it off

* Questions I have for Alvin Pang
** How do I get feedback? How do I find a good editor?
** How do I write more quickly and consistently?
** I wonder if there's room for a non-linear document format with collapsible and expandable sections (expand to get the nitty-gritty technical details)
** Ask Alvin about the best way to *teach* good writing is --- I want to write a post about writing First-class essays, and I currently give my sister advice on her writing.
** There is a difference between writing creatively (possibly meandering, possibly florid, expressive language) and writing publicly (use simple words, short and concise). Is there any overlap? Is there any room for florid language?
- yes, when painting a picture of the future
  anchor or highlight a particular argument
  "Thinkpieces" -- but be very selective.

** alfwork@gmail.com 
** Neon Yang's TENSORATE series 
* Third places in Singapore
* Interesting saucy story from Edward's ex-boss
Edward Low, [17.11.20 15:31]
in the not so distant past
four (rich) men in singapore would get together to buy a condominium apartment
they would use said apartment to meet up, talk cock, drink beer, watch football, and fuck their mistresses
this was apparently a very common arrangement
geographically there are certain spots in singapore which were popular sites for purchase
this is all hearsay from my ex-boss
my ex-boss is gay but these guys certainly weren't
the most famous of these 'arrangements' was between the heads of the key local banks
DBS UBS, one more i forgot (OCBC?), and then minister of finance (i believe)
so one of the bank heads owned the then newly opened mandarin oriental
so the four of them would meet up in the restaurant for a banquet of exotic asian cuisines to boost their sex drives (i.e. tiger penis)
then retire upstairs to the rooms for orgies
naturally they developed a close relationship with each other, which turned out to be p good for singapore
there was apparently a major share crash in the early days of SGX
some bluechip malaysian company defaulted
so the stockbrokers were getting fucked
so the minister called up his fuck buddies and told them to hold off on collecting payment from the stockbrokers so as to allow them to remain slightly liquid
this staved off the crash

* Rust tidbits
When the program has a valid reference, the borrow checker enforces the ownership and borrowing rules (covered in Chapter 4) to ensure this reference and any other references to the contents of the vector remain valid. Recall the rule that states you can’t have mutable and immutable references in the same scope. That rule applies in Listing 8-7, where we hold an immutable reference to the first element in a vector and try to add an element to the end, which won’t work if we also try to refer to that element later in the function:

 [This code does not compile!] 
    let mut v = vec![1, 2, 3, 4, 5];

    let first = &v[0];

    v.push(6);

    println!("The first element is: {}", first);

Listing 8-7: Attempting to add an element to a vector while holding a reference to an item

* Rust problems
 - having trouble with strings
 - enums2

* TODO Learn org-mode :CS:
** TODO Figure out how to use org-capture and org-roam
*** WAIT Why no backlinks?
*** TODO How do I tag?
*** TODO How do I convert to YAML-Markdown?
Markdown Roam: https://github.com/nobiot/md-roam
** TODO Install md-roam
** TODO Watch org-roam talks at the EmacsConf
[[https://emacsconf.org/2020/schedule/][Emacs Conf 2020 schedule]]
** [[https://blog.jethro.dev/posts/capturing_inbox/][Read this entire series written by Jethro]]
** [[https://orgmode.org/worg/org-tutorials/org4beginners.html][Org Mode beginning at the basics]]
** [[orgmode.org/manual][Org Mode Manual]]
** DONE Think about how to use agenda mode
** DONE Think about how to organise my todo files
Do I use `todo.org` at all? Should I just use `braindump.org` for everything?
In general should I use multiple files or a single large file?
Take a look at [[https://blog.jethro.dev/posts/zettelkasten_with_org/][Jethro's Zettelkasten with Org-mode.]]
See if I want to use Zettlekasten.
* TODO Build a distributed, encrypted key-value store?
* TODO Digital gardening
** TODO Think about the separation between todo.org and braindump.org.
Todos are todos, braindumps are just dumps/notes, but sometimes braindumps are
actionable and sometimes TODOs need context.
** TODO Think about how best to structure my digital garden/second brain/whatever
*** DONE Move all my files around and stuff
:LOGBOOK:
CLOCK: [2020-11-06 Fri 09:51]--[2020-11-06 Fri 13:26] => 3:35 :END:

** TODO Come up with some sort of visualisation for my .org files, like Jethro's braindump in [[Digital gardens]]
https://notes.alexkehayias.com/

* HOLD What's the canonical way to link to other posts with Eleventy?
* TODO Become the best software engineer that I can be :WORK:OGP:CS:
** Overview
I will be a "proper" card-carrying software engineer soon.
I want to focus on being the best software engineer that I can be.
What should I learn in order to be the best?
This is what OGP's career document has to say:

:OGPCAREERDOCUMENT:
Software Engineers are competent individual contributors.
They are comfortable with engineering tools such as source control, error
monitoring, automated testing, and more. They can successfully run systems in
production, though they may be unable to design such systems themselves. They
can reason about the practical implications of a system design and can make
useful contributions to design discussions. Overall, they are able to prioritize
engineering tasks for themselves and complete them independently.

Concretely this means Software Engineers are able to:

- Write code that matches the readability and design standards of the team
- Implement systems from a given architectural design
- Understand the design goals and limits of a given system and work around them
- Prioritize engineering tasks effectively and avoid getting stuck on low impact work
- Use engineering tools effectively
  - Collaborate with other engineers by writing well defined pull requests
  - Participate productively in a code review both as a reviewee and reviewer
  - Branching and merging appropriately in source control
  - Configure build tools for simplified deployment and development
  - Setup automated testing to prevent code regressions
- Operate production systems reliably
  - Setup and operate cloud infrastructure for a given architectural design
  - Implement logging and be comfortable searching through logs
  - Configure basic alert systems to minimize downtime
  - Deploy code to production using practices that minimize risk of user interruption
  - Respond to production outages and recover from simple errors
  - Conduct post mortems detailing the significant events and root cause analysis
    :END:

It looks like the pull request and code review part
can be learned through OSS work (or on the job),
but how do I learn the learn automated testing and build tools?
And how do I learn everything under the section
"Operate production systems reliably"?

What's going to give me the best bang for my buck?
Should I be working on open-source projects?
Or writing my own side projects?
Or should I learn fundamental CS concepts like networks, OS, distributed systems?
** TODO Compile the largest gaps in my CS knowledge
- Reading source code
- Force yourself to understand it by reading through the source code.
** TODO Ask mentors for advice: what should I do?
*** DONE Ask Seb for advice with several well-crafted questions
*** DONE Attend Office hours with Ben
SCHEDULED: <2020-11-05 Wed 21:30>
see braindump for notes on the call
*** TODO Write an email to Robert to ask him for advice + ask for another office hour?
*** DONE Think about what Ben said and send an email to thank him
** TODO Compile what different mentors said and synthesise them into something actionable
** TODO Read and learn from the best textbooks
*** DONE Move the PDFs to the Remarkable so that I can read them on the go
*** TODO [[./books/DDIA.pdf][Designing Data-Intensive Applications (DDIA)]]
*** TODO [[./books/SICP_JS.pdf][SICP (JS version)]]
** TODO Do projects that maximise my learning
*** TODO Learn Rust
**** DONE [[https://www.youtube.com/watch?v=DnT-LUQgc7s][Considering Rust: video link]]
**** TODO [[https://doc.rust-lang.org/book/index.html][Rust tutorial: The Rust Programming Language]]
***** TODO Work through the tutorial [0/20]
****** TODO Chapter 1
****** TODO Chapter 2
****** TODO Chapter 3
****** TODO Chapter 4
****** TODO Chapter 5
****** TODO Chapter 6
****** TODO Chapter 7
****** TODO Chapter 8
****** TODO Chapter 9
****** TODO Chapter 10
****** TODO Chapter 11
****** TODO Chapter 12
****** TODO Chapter 13
****** TODO Chapter 14
****** TODO Chapter 15
****** TODO Chapter 16
****** TODO Chapter 17
****** TODO Chapter 18
****** TODO Chapter 19
****** TODO Chapter 20
**** TODO [[http://www.arewewebyet.org/][Web development in Rust]]
**** TODO [[https://fasterthanli.me/articles/a-half-hour-to-learn-rust][Teaches you Rust from code snippets]]
*** TODO Do CS140e: building an OS on the Raspberry Pi 1A+
Prerequisite: [[Learn Rust]]
** DONE Complete Bradfield CS take-home
[[file:docs/bradfield_csi_takehome.pdf]]
DEADLINE: <2020-11-08 Sun 12:00>
:LOGBOOK:
CLOCK: [2020-11-07 Sat 17:52]--[2020-11-07 Sat 20:00] =>  2:08
:END:

* Notes on Talk with Robert (1st December 2020)
- Don't do a Master's for signalling purpose but do it for the student experience or the joy of learning.
- For a post that is more of parenting, I come up with little ideas that make up a sentence or paragraph
  and collate them over two months
- Write down all the notes you can and everytime you think of something add it to your list.
- Is writing difficult? Is writing *uniquely* difficult?
  - I only really ever write in the morning, something about timing makes it good
  - It gets harder and harder as you get closer and closer to finishing it
  - Sometimes I try to write a funny joke and I stress out about whether
  - Write "TODO" if you're not having fun and move around, keep it flowy
  - Sometimes set a goal to write for X amount of time could help.
- About writing full-time?
  - Having the chance to really focus on that full-time would be cool
  - Are you thinking of monetising writing full time?
    It's easier to not. Realistically I should. If I do it full time I can spend much more writing
    and I can look into monetising stuff and presentation and AdWords, put more thought into that
    kind of stuff
- How do I become Senior ASAP?
  - You need to push for more technically complex projects to be put on,
    managers are supposed to be thinking "This person is here for X years,
    he should be Y level, how do we make that happen?"
    At Stripe it takes about 3 or 4 years to get from L1 to L3
  - Previously I sort of muddled along and
    now instead I
    go down through the checklist and say "What am I doing at this level? What do I need to do?"
- How to write better? I'm competent, can write concisely, but I don't have that flair, that faculty
  - Sprinkling little jokes throughout tells the reader that you're a real person
    even if the jokes aren't funny.
    You're on their side.
- My wife is my best editor
  - She's less experienced in programming so she has a beginner's mind
  - Hard to get reviews from my friends
- I read this eBook and it's about writing non-fiction books and a big part of it is about getting feedback.

* Thinking about my thesis
** What do we want to prove?
My thesis showed a correlation between
travel-time compact districts and homogeneity.

Why might this be the case?
The idea is that more homogenous communities
tend to have lower average pairwise travel time
between its members
as compared to a similar random selection of
people around the region.

Districts that keep communities of interest
together therefore simultaneously
a) decrease average APTT; and
b) are more homogeneous (less spatially diverse)

** How can we prove the mechanism of ED/travel times?
In order to prove that
groups of people who are travel-time compact
tend also to be homogeneous,
it would be instructive to
find a case like this:
Consider three groups of people.
Call these groups A, B and C.
Let A be closer to B by Euclidean distance,
while C be closer to B by travel time.
Ergo,
ED(B,A) < ED(B,C), but
TT(B,A) > TT(B,C).
(This could be possible with cliffs,
rivers or otherwise impassible terrain).

We would ideally like to find that in terms of
Spatial Diversity scores,
C and B are more similar
than A and B.

How we might do this in practice:
Find triplets of adjacent Census Tracts
and calculate the Euclidean distance
vs travel times between the centroids
of these Census Tracts.

Another approach would be to find a subset of
Census Tracts that belong to a CoI
and show that that subset of Census Tracts
tends to have lower pairwise APTTs/EDs
AND lower spatial diversity compared to
another "similar" subset of Census Tracts
that don't belong to a CoI.
(But similar how? How to control?)

As a lower bar:
We could just take any random subset of Census Tracts.
Compare a random subset of Census Tracts
to another random subset of Census Tracts
(but they roughly be in the same region
otherwise lots of omitted variables),
and show a correlation between
average APTT between tract centroids and
the spatial diversity of those tracts.

* Interesting hack from NDI: facial recognition?
NDI has a facial recognition API
You send them an NRIC and a face photo and they give u a confidence
score
Stalking people with just a photo?
Keep whacking the API with random NRIC until we get a high confidence score
